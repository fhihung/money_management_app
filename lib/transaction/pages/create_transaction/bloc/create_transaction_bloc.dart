import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:money_management_app/models/m_transaction.dart';
import 'package:money_management_app/transaction/pages/create_transaction/bloc/create_transaction_event.dart';
import 'package:money_management_app/transaction/pages/create_transaction/bloc/create_transaction_state.dart';

import '../../../controllers/transaction_controller.dart';

class CreateTransactionBloc extends Bloc<CreateTransactionEvent, CreateTransactionState> {
  CreateTransactionBloc() : super(const CreateTransactionState()) {
    on<CreateTransactionInitiated>(
      _onCreateTransactionInitiated,
    );
    on<AccountSelected>(
      _onAccountSelected,
    );
    on<DateSelected>(
      _onDateSelected,
    );

    on<CategorySelected>(
      _onCategorySelected,
    );
    on<CreateExpenseTransactionButtonPressed>(
      _onCreateExpenseTransactionButtonPressed,
    );
  }

  TransactionController transactionController = TransactionController();

  FutureOr<void> _onCreateTransactionInitiated(
    CreateTransactionInitiated event,
    Emitter<CreateTransactionState> emit,
  ) {}
  FutureOr<void> _onAccountSelected(
    AccountSelected event,
    Emitter<CreateTransactionState> emit,
  ) async {
    emit(
      state.copyWith(
        selectedAccount: event.accountId,
      ),
    );
  }

  FutureOr<void> _onCategorySelected(
    CategorySelected event,
    Emitter<CreateTransactionState> emit,
  ) async {
    emit(
      state.copyWith(
        selectedCategory: event.category,
      ),
    );
  }

  FutureOr<void> _onDateSelected(
    DateSelected event,
    Emitter<CreateTransactionState> emit,
  ) async {
    emit(
      state.copyWith(
        selectedDate: event.date,
      ),
    );
  }

  FutureOr<void> _onCreateExpenseTransactionButtonPressed(
    CreateExpenseTransactionButtonPressed event,
    Emitter<CreateTransactionState> emit,
  ) async {
    final transaction = MTransaction(
      null, // id will be auto-generated by the database
      title: event.title,
      accountId: event.accountId,
      categoryId: event.categoryId,
      amount: event.amount,
      note: event.note,
      transactionDate: event.transactionDate,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    await transactionController.createTransaction(transaction);
  }
}
